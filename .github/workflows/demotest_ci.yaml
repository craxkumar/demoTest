name: CI

on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
  IMAGE_TAG: demotest
  AWS_REGION: us-east-2
  ECS_SERVICE: rorTestService
  ECS_CLUSTER: rorTestCluster
  CONTAINER_NAME: ruby_app
  ECS_TASK_DEFINITION: ecs-task-def.json


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Configure AWS credentials 
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::855770807483:role/github-actions-role
          role-session-name: GitHub-Action-Role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Remove untagged images from ECR
        run: |
          IMAGES_TO_DELETE=$( aws ecr list-images --region ${{ env.AWS_REGION }} --repository-name $ECR_REPOSITORY --filter "tagStatus=UNTAGGED" --query 'imageIds[*]' --output json )
          aws ecr batch-delete-image --region ${{ env.AWS_REGION }} --repository-name $ECR_REPOSITORY --image-ids "$IMAGES_TO_DELETE" || true

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: '${{ env.ECS_TASK_DEFINITION }}'
          container-name: '${{ env.CONTAINER_NAME }}'
          image: '${{ steps.build-image.outputs.image }}'

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: '${{ steps.task-def.outputs.task-definition }}'
          service: '${{ env.ECS_SERVICE }}'
          cluster: '${{ env.ECS_CLUSTER }}'
          wait-for-service-stability: true